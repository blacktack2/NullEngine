/**
 * See VectorMath.h for the implementation types used for this X-Macro definition file (as well as example usage).
 * If any boolean operations are to be included, the Bool vectors must be defined first.
 * This file uses the following macros (all of which are removed via undef at the end of this file)
 * Requred:
 * - NE_VECTORMATH_VECTOR_CLASS(n) - Should append n to the name of the vector class (e.g. Float)
 * - NE_VECTORMATH_VECTOR_TYPE - The actual type of components (e.g. float)
 * Optional:
 * - NE_VECTORMATH_OP_COMPARISON - Include the comparison operators (==, !=, >, <, >=, <=)
 * - NE_VECTORMATH_OP_LOGICAL - Include the logical operators (!, &&, ||)
 * - NE_VECTORMATH_OP_BITWISE - Include the bitwise operators (~, &, |, ^, <<, >>)
 * - NE_VECTORMATH_OP_ARITHMETIC - Include the arithmetic operators (+, -, +n, -n, *, /)
 * - NE_VECTORMATH_OP_MODULO - Include the modulo operator (%)
 * - NE_VECTORMATH_OP_INC_DEC - Include the increment/decrement operators (++, --)
 */

#if !defined(NE_VECTORMATH_VECTOR_TYPE) || !defined(NE_VECTORMATH_VECTOR_CLASS)
#error "Must define the corresponding vector types before including this file"
#endif //!defined(NE_VECTORMATH_VECTOR_CLASS) || !defined(NE_VECTORMATH_VECTOR_TYPE)
#if !defined(NE_MATH_INL_CEX) ||!defined(NE_MATH_INL) ||!defined(NE_MATH_CEX)
#error "Must define math function declaration prefixes"
#endif //!defined(NE_MATH_INL_CEX) ||!defined(NE_MATH_INL) ||!defined(NE_MATH_CEX)

#define NE_COMPONENT NE_VECTORMATH_VECTOR_TYPE

#define NE_VECTOR1 NE_CONCAT(NE_VECTORMATH_VECTOR_CLASS, 1)
#define NE_VECTOR1_ARG NE_CONCAT(NE_VECTOR1, _arg)

#define NE_VECTOR2 NE_CONCAT(NE_VECTORMATH_VECTOR_CLASS, 2)
#define NE_VECTOR2_ARG NE_CONCAT(NE_VECTOR2, _arg)

#define NE_VECTOR3 NE_CONCAT(NE_VECTORMATH_VECTOR_CLASS, 3)
#define NE_VECTOR3_ARG NE_CONCAT(NE_VECTOR3, _arg)

#define NE_VECTOR4 NE_CONCAT(NE_VECTORMATH_VECTOR_CLASS, 4)
#define NE_VECTOR4_ARG NE_CONCAT(NE_VECTOR4, _arg)

namespace null
{
    namespace math
    {
        class NE_VECTOR1
        {
        public:
            union
            {
                NE_COMPONENT x;
                NE_COMPONENT r;
            };
        public:
            NE_MATH_INL_CEX NE_VECTOR1();
            NE_MATH_INL_CEX NE_VECTOR1(NE_COMPONENT x);

            NE_MATH_INL_CEX NE_VECTOR1(const NE_VECTOR1& other);
            NE_MATH_INL_CEX NE_VECTOR1(NE_VECTOR1&& other);
            NE_MATH_INL_CEX NE_VECTOR1& operator=(const NE_VECTOR1& other);
            NE_MATH_INL_CEX NE_VECTOR1& operator=(NE_VECTOR1&& other);

            NE_MATH_INL_CEX NE_VECTOR1& operator=(NE_COMPONENT x);
            NE_MATH_INL_CEX operator NE_COMPONENT() const;

            NE_MATH_INL_CEX NE_COMPONENT& operator[](std::size_t idx);
            NE_MATH_INL_CEX NE_COMPONENT operator[](std::size_t idx) const;

#ifdef NE_VECTORMATH_OP_ARITHMETIC
            NE_MATH_INL_CEX NE_VECTOR1& operator+=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR1& operator+=(NE_VECTOR1_ARG other);

            NE_MATH_INL_CEX NE_VECTOR1& operator-=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR1& operator-=(NE_VECTOR1_ARG other);

            NE_MATH_INL_CEX NE_VECTOR1& operator*=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR1& operator*=(NE_VECTOR1_ARG other);

            NE_MATH_INL_CEX NE_VECTOR1& operator/=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR1& operator/=(NE_VECTOR1_ARG other);
#endif //NE_VECTORMATH_OP_ARITHMETIC

#ifdef NE_VECTORMATH_OP_MODULO
            NE_MATH_INL_CEX NE_VECTOR1 operator%=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR1 operator%=(NE_VECTOR1_ARG other);
#endif //NE_VECTORMATH_OP_MODULO

#ifdef NE_VECTORMATH_OP_INC_DEC
            NE_MATH_INL_CEX NE_VECTOR1& operator++();
            NE_MATH_INL_CEX NE_VECTOR1 operator++(int);
            NE_MATH_INL_CEX NE_VECTOR1& operator--();
            NE_MATH_INL_CEX NE_VECTOR1 operator--(int);
#endif //NE_VECTORMATH_OP_INC_DEC
        };

#ifdef NE_VECTORMATH_OP_COMPARISON
        NE_MATH_INL_CEX Bool1 operator==(NE_COMPONENT scalar, NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX Bool1 operator==(NE_VECTOR1_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool1 operator==(NE_VECTOR1_ARG vectorA, NE_VECTOR1_ARG vectorB);

        NE_MATH_INL_CEX Bool1 operator!=(NE_COMPONENT scalar, NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX Bool1 operator!=(NE_VECTOR1_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool1 operator!=(NE_VECTOR1_ARG vectorA, NE_VECTOR1_ARG vectorB);
#endif //NE_VECTORMATH_OP_COMPARISON

#ifdef NE_VECTORMATH_OP_LOGICAL
        NE_MATH_INL_CEX Bool1 operator!(NE_VECTOR1_ARG vector);

        NE_MATH_INL_CEX Bool1 operator&&(NE_COMPONENT scalar, NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX Bool1 operator&&(NE_VECTOR1_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool1 operator&&(NE_VECTOR1_ARG vectorA, NE_VECTOR1_ARG vectorB);

        NE_MATH_INL_CEX Bool1 operator||(NE_COMPONENT scalar, NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX Bool1 operator||(NE_VECTOR1_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool1 operator||(NE_VECTOR1_ARG vectorA, NE_VECTOR1_ARG vectorB);
#endif //NE_VECTORMATH_OP_LOGICAL

#ifdef NE_VECTORMATH_OP_BITWISE
        NE_MATH_INL_CEX NE_VECTOR1 operator~(NE_VECTOR1_ARG vector);

        NE_MATH_INL_CEX NE_VECTOR1 operator&(NE_COMPONENT scalar, NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR1 operator&(NE_VECTOR1_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR1 operator&(NE_VECTOR1_ARG vectorA, NE_VECTOR1_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR1 operator|(NE_COMPONENT scalar, NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR1 operator|(NE_VECTOR1_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR1 operator|(NE_VECTOR1_ARG vectorA, NE_VECTOR1_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR1 operator^(NE_COMPONENT scalar, NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR1 operator^(NE_VECTOR1_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR1 operator^(NE_VECTOR1_ARG vectorA, NE_VECTOR1_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR1 operator<<(NE_COMPONENT scalar, NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR1 operator<<(NE_VECTOR1_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR1 operator<<(NE_VECTOR1_ARG vectorA, NE_VECTOR1_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR1 operator>>(NE_COMPONENT scalar, NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR1 operator>>(NE_VECTOR1_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR1 operator>>(NE_VECTOR1_ARG vectorA, NE_VECTOR1_ARG vectorB);
#endif //NE_VECTORMATH_OP_BITWISE

#ifdef NE_VECTORMATH_OP_ARITHMETIC
        NE_MATH_INL_CEX NE_VECTOR1 operator+(NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR1 operator-(NE_VECTOR1_ARG vector);

        NE_MATH_INL_CEX NE_VECTOR1 operator+(NE_COMPONENT scalar, NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR1 operator+(NE_VECTOR1_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR1 operator+(NE_VECTOR1_ARG vectorA, NE_VECTOR1_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR1 operator-(NE_COMPONENT scalar, NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR1 operator-(NE_VECTOR1_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR1 operator-(NE_VECTOR1_ARG vectorA, NE_VECTOR1_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR1 operator*(NE_COMPONENT scalar, NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR1 operator*(NE_VECTOR1_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR1 operator*(NE_VECTOR1_ARG vectorA, NE_VECTOR1_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR1 operator/(NE_COMPONENT scalar, NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR1 operator/(NE_VECTOR1_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR1 operator/(NE_VECTOR1_ARG vectorA, NE_VECTOR1_ARG vectorB);
#endif //NE_VECTORMATH_OP_ARITHMETIC

#ifdef NE_VECTORMATH_OP_MODULO
        NE_MATH_INL_CEX NE_VECTOR1 operator%(NE_COMPONENT scalar, NE_VECTOR1_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR1 operator%(NE_VECTOR1_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR1 operator%(NE_VECTOR1_ARG vectorA, NE_VECTOR1_ARG vectorB);
#endif //NE_VECTORMATH_OP_MODULO

        class NE_VECTOR2
        {
        public:
            union
            {
                struct { NE_COMPONENT x, y; };
                struct { NE_COMPONENT r, g; };
            };
        public:
            NE_MATH_INL_CEX NE_VECTOR2();
            /**
             * Assign scalar to all components
             */
            explicit NE_MATH_INL_CEX NE_VECTOR2(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR2(NE_COMPONENT x, NE_COMPONENT y);

            NE_MATH_INL_CEX NE_VECTOR2(const NE_VECTOR2& other);
            NE_MATH_INL_CEX NE_VECTOR2(NE_VECTOR2&& other);
            NE_MATH_INL_CEX NE_VECTOR2& operator=(const NE_VECTOR2& other);
            NE_MATH_INL_CEX NE_VECTOR2& operator=(NE_VECTOR2&& other);

            NE_MATH_INL_CEX NE_COMPONENT& operator[](std::size_t idx);
            NE_MATH_INL_CEX NE_COMPONENT operator[](std::size_t idx) const;

#ifdef NE_VECTORMATH_OP_ARITHMETIC
            NE_MATH_INL_CEX NE_VECTOR2& operator+=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR2& operator+=(NE_VECTOR2_ARG other);

            NE_MATH_INL_CEX NE_VECTOR2& operator-=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR2& operator-=(NE_VECTOR2_ARG other);

            NE_MATH_INL_CEX NE_VECTOR2& operator*=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR2& operator*=(NE_VECTOR2_ARG other);

            NE_MATH_INL_CEX NE_VECTOR2& operator/=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR2& operator/=(NE_VECTOR2_ARG other);
#endif //NE_VECTORMATH_OP_ARITHMETIC

#ifdef NE_VECTORMATH_OP_MODULO
            NE_MATH_INL_CEX NE_VECTOR2 operator%=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR2 operator%=(NE_VECTOR2_ARG other);
#endif //NE_VECTORMATH_OP_MODULO

#ifdef NE_VECTORMATH_OP_INC_DEC
            NE_MATH_INL_CEX NE_VECTOR2& operator++();
            NE_MATH_INL_CEX NE_VECTOR2 operator++(int);
            NE_MATH_INL_CEX NE_VECTOR2& operator--();
            NE_MATH_INL_CEX NE_VECTOR2 operator--(int);
#endif //NE_VECTORMATH_OP_INC_DEC
        };

#ifdef NE_VECTORMATH_OP_COMPARISON
        NE_MATH_INL_CEX Bool2 operator==(NE_COMPONENT scalar, NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX Bool2 operator==(NE_VECTOR2_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool2 operator==(NE_VECTOR2_ARG vectorA, NE_VECTOR2_ARG vectorB);

        NE_MATH_INL_CEX Bool2 operator!=(NE_COMPONENT scalar, NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX Bool2 operator!=(NE_VECTOR2_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool2 operator!=(NE_VECTOR2_ARG vectorA, NE_VECTOR2_ARG vectorB);
#endif //NE_VECTORMATH_OP_COMPARISON

#ifdef NE_VECTORMATH_OP_LOGICAL
        NE_MATH_INL_CEX Bool2 operator!(NE_VECTOR2_ARG vector);

        NE_MATH_INL_CEX Bool2 operator&&(NE_COMPONENT scalar, NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX Bool2 operator&&(NE_VECTOR2_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool2 operator&&(NE_VECTOR2_ARG vectorA, NE_VECTOR2_ARG vectorB);

        NE_MATH_INL_CEX Bool2 operator||(NE_COMPONENT scalar, NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX Bool2 operator||(NE_VECTOR2_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool2 operator||(NE_VECTOR2_ARG vectorA, NE_VECTOR2_ARG vectorB);
#endif //NE_VECTORMATH_OP_LOGICAL

#ifdef NE_VECTORMATH_OP_BITWISE
        NE_MATH_INL_CEX NE_VECTOR2 operator~(NE_VECTOR2_ARG vector);

        NE_MATH_INL_CEX NE_VECTOR2 operator&(NE_COMPONENT scalar, NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR2 operator&(NE_VECTOR2_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR2 operator&(NE_VECTOR2_ARG vectorA, NE_VECTOR2_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR2 operator|(NE_COMPONENT scalar, NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR2 operator|(NE_VECTOR2_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR2 operator|(NE_VECTOR2_ARG vectorA, NE_VECTOR2_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR2 operator^(NE_COMPONENT scalar, NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR2 operator^(NE_VECTOR2_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR2 operator^(NE_VECTOR2_ARG vectorA, NE_VECTOR2_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR2 operator<<(NE_COMPONENT scalar, NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR2 operator<<(NE_VECTOR2_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR2 operator<<(NE_VECTOR2_ARG vectorA, NE_VECTOR2_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR2 operator>>(NE_COMPONENT scalar, NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR2 operator>>(NE_VECTOR2_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR2 operator>>(NE_VECTOR2_ARG vectorA, NE_VECTOR2_ARG vectorB);
#endif //NE_VECTORMATH_OP_BITWISE

#ifdef NE_VECTORMATH_OP_ARITHMETIC
        NE_MATH_INL_CEX NE_VECTOR2 operator+(NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR2 operator-(NE_VECTOR2_ARG vector);

        NE_MATH_INL_CEX NE_VECTOR2 operator+(NE_COMPONENT scalar, NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR2 operator+(NE_VECTOR2_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR2 operator+(NE_VECTOR2_ARG vectorA, NE_VECTOR2_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR2 operator-(NE_COMPONENT scalar, NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR2 operator-(NE_VECTOR2_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR2 operator-(NE_VECTOR2_ARG vectorA, NE_VECTOR2_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR2 operator*(NE_COMPONENT scalar, NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR2 operator*(NE_VECTOR2_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR2 operator*(NE_VECTOR2_ARG vectorA, NE_VECTOR2_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR2 operator/(NE_COMPONENT scalar, NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR2 operator/(NE_VECTOR2_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR2 operator/(NE_VECTOR2_ARG vectorA, NE_VECTOR2_ARG vectorB);
#endif //NE_VECTORMATH_OP_ARITHMETIC

#ifdef NE_VECTORMATH_OP_MODULO
        NE_MATH_INL_CEX NE_VECTOR2 operator%(NE_COMPONENT scalar, NE_VECTOR2_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR2 operator%(NE_VECTOR2_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR2 operator%(NE_VECTOR2_ARG vectorA, NE_VECTOR2_ARG vectorB);
#endif //NE_VECTORMATH_OP_MODULO

        class NE_VECTOR3
        {
        public:
            union
            {
                struct { NE_COMPONENT x, y, z; };
                struct { NE_COMPONENT r, g, b; };
            };
        public:
            NE_MATH_INL_CEX NE_VECTOR3();
            /**
             * Assign scalar to all components
             */
            explicit NE_MATH_INL_CEX NE_VECTOR3(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR3(NE_COMPONENT x, NE_COMPONENT y, NE_COMPONENT z);
            NE_MATH_INL_CEX NE_VECTOR3(NE_VECTOR2_ARG xy, NE_COMPONENT z);
            NE_MATH_INL_CEX NE_VECTOR3(NE_COMPONENT x, NE_VECTOR2_ARG yz);

            NE_MATH_INL_CEX NE_VECTOR3(const NE_VECTOR3& other);
            NE_MATH_INL_CEX NE_VECTOR3(NE_VECTOR3&& other);
            NE_MATH_INL_CEX NE_VECTOR3& operator=(const NE_VECTOR3& other);
            NE_MATH_INL_CEX NE_VECTOR3& operator=(NE_VECTOR3&& other);

            NE_MATH_INL_CEX NE_COMPONENT& operator[](std::size_t idx);
            NE_MATH_INL_CEX NE_COMPONENT operator[](std::size_t idx) const;

#ifdef NE_VECTORMATH_OP_ARITHMETIC
            NE_MATH_INL_CEX NE_VECTOR3& operator+=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR3& operator+=(NE_VECTOR3_ARG other);

            NE_MATH_INL_CEX NE_VECTOR3& operator-=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR3& operator-=(NE_VECTOR3_ARG other);

            NE_MATH_INL_CEX NE_VECTOR3& operator*=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR3& operator*=(NE_VECTOR3_ARG other);

            NE_MATH_INL_CEX NE_VECTOR3& operator/=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR3& operator/=(NE_VECTOR3_ARG other);
#endif //NE_VECTORMATH_OP_ARITHMETIC

#ifdef NE_VECTORMATH_OP_MODULO
            NE_MATH_INL_CEX NE_VECTOR3 operator%=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR3 operator%=(NE_VECTOR3_ARG other);
#endif //NE_VECTORMATH_OP_MODULO

#ifdef NE_VECTORMATH_OP_INC_DEC
            NE_MATH_INL_CEX NE_VECTOR3& operator++();
            NE_MATH_INL_CEX NE_VECTOR3 operator++(int);
            NE_MATH_INL_CEX NE_VECTOR3& operator--();
            NE_MATH_INL_CEX NE_VECTOR3 operator--(int);
#endif //NE_VECTORMATH_OP_INC_DEC
        };

#ifdef NE_VECTORMATH_OP_COMPARISON
        NE_MATH_INL_CEX Bool3 operator==(NE_COMPONENT scalar, NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX Bool3 operator==(NE_VECTOR3_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool3 operator==(NE_VECTOR3_ARG vectorA, NE_VECTOR3_ARG vectorB);

        NE_MATH_INL_CEX Bool3 operator!=(NE_COMPONENT scalar, NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX Bool3 operator!=(NE_VECTOR3_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool3 operator!=(NE_VECTOR3_ARG vectorA, NE_VECTOR3_ARG vectorB);
#endif //NE_VECTORMATH_OP_COMPARISON

#ifdef NE_VECTORMATH_OP_LOGICAL
        NE_MATH_INL_CEX Bool3 operator!(NE_VECTOR3_ARG vector);

        NE_MATH_INL_CEX Bool3 operator&&(NE_COMPONENT scalar, NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX Bool3 operator&&(NE_VECTOR3_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool3 operator&&(NE_VECTOR3_ARG vectorA, NE_VECTOR3_ARG vectorB);

        NE_MATH_INL_CEX Bool3 operator||(NE_COMPONENT scalar, NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX Bool3 operator||(NE_VECTOR3_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool3 operator||(NE_VECTOR3_ARG vectorA, NE_VECTOR3_ARG vectorB);
#endif //NE_VECTORMATH_OP_LOGICAL

#ifdef NE_VECTORMATH_OP_BITWISE
        NE_MATH_INL_CEX NE_VECTOR3 operator~(NE_VECTOR3_ARG vector);

        NE_MATH_INL_CEX NE_VECTOR3 operator&(NE_COMPONENT scalar, NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR3 operator&(NE_VECTOR3_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR3 operator&(NE_VECTOR3_ARG vectorA, NE_VECTOR3_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR3 operator|(NE_COMPONENT scalar, NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR3 operator|(NE_VECTOR3_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR3 operator|(NE_VECTOR3_ARG vectorA, NE_VECTOR3_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR3 operator^(NE_COMPONENT scalar, NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR3 operator^(NE_VECTOR3_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR3 operator^(NE_VECTOR3_ARG vectorA, NE_VECTOR3_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR3 operator<<(NE_COMPONENT scalar, NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR3 operator<<(NE_VECTOR3_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR3 operator<<(NE_VECTOR3_ARG vectorA, NE_VECTOR3_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR3 operator>>(NE_COMPONENT scalar, NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR3 operator>>(NE_VECTOR3_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR3 operator>>(NE_VECTOR3_ARG vectorA, NE_VECTOR3_ARG vectorB);
#endif //NE_VECTORMATH_OP_BITWISE

#ifdef NE_VECTORMATH_OP_ARITHMETIC
        NE_MATH_INL_CEX NE_VECTOR3 operator+(NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR3 operator-(NE_VECTOR3_ARG vector);

        NE_MATH_INL_CEX NE_VECTOR3 operator+(NE_COMPONENT scalar, NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR3 operator+(NE_VECTOR3_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR3 operator+(NE_VECTOR3_ARG vectorA, NE_VECTOR3_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR3 operator-(NE_COMPONENT scalar, NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR3 operator-(NE_VECTOR3_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR3 operator-(NE_VECTOR3_ARG vectorA, NE_VECTOR3_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR3 operator*(NE_COMPONENT scalar, NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR3 operator*(NE_VECTOR3_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR3 operator*(NE_VECTOR3_ARG vectorA, NE_VECTOR3_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR3 operator/(NE_COMPONENT scalar, NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR3 operator/(NE_VECTOR3_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR3 operator/(NE_VECTOR3_ARG vectorA, NE_VECTOR3_ARG vectorB);
#endif //NE_VECTORMATH_OP_ARITHMETIC

#ifdef NE_VECTORMATH_OP_MODULO
        NE_MATH_INL_CEX NE_VECTOR3 operator%(NE_COMPONENT scalar, NE_VECTOR3_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR3 operator%(NE_VECTOR3_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR3 operator%(NE_VECTOR3_ARG vectorA, NE_VECTOR3_ARG vectorB);
#endif //NE_VECTORMATH_OP_MODULO

        class NE_VECTOR4
        {
        public:
            union
            {
                struct { NE_COMPONENT x, y, z, w; };
                struct { NE_COMPONENT r, g, b, a; };
            };
        public:
            NE_MATH_INL_CEX NE_VECTOR4();
            /**
             * Assign scalar to all components
             */
            explicit NE_MATH_INL_CEX NE_VECTOR4(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR4(NE_COMPONENT x, NE_COMPONENT y, NE_COMPONENT z, NE_COMPONENT w);
            NE_MATH_INL_CEX NE_VECTOR4(NE_VECTOR2_ARG xy, NE_COMPONENT z, NE_COMPONENT w);
            NE_MATH_INL_CEX NE_VECTOR4(NE_COMPONENT x, NE_VECTOR2_ARG yz, NE_COMPONENT w);
            NE_MATH_INL_CEX NE_VECTOR4(NE_COMPONENT x, NE_COMPONENT y, NE_VECTOR2_ARG zw);
            NE_MATH_INL_CEX NE_VECTOR4(NE_VECTOR2_ARG xy, NE_VECTOR2_ARG zw);
            NE_MATH_INL_CEX NE_VECTOR4(NE_VECTOR3_ARG xyz, NE_COMPONENT w);
            NE_MATH_INL_CEX NE_VECTOR4(NE_COMPONENT x, NE_VECTOR3_ARG yzw);

            NE_MATH_INL_CEX NE_VECTOR4(const NE_VECTOR4& other);
            NE_MATH_INL_CEX NE_VECTOR4(NE_VECTOR4&& other);
            NE_MATH_INL_CEX NE_VECTOR4& operator=(const NE_VECTOR4& other);
            NE_MATH_INL_CEX NE_VECTOR4& operator=(NE_VECTOR4&& other);

            NE_MATH_INL_CEX NE_COMPONENT& operator[](std::size_t idx);
            NE_MATH_INL_CEX NE_COMPONENT operator[](std::size_t idx) const;

#ifdef NE_VECTORMATH_OP_ARITHMETIC
            NE_MATH_INL_CEX NE_VECTOR4& operator+=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR4& operator+=(NE_VECTOR4_ARG other);

            NE_MATH_INL_CEX NE_VECTOR4& operator-=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR4& operator-=(NE_VECTOR4_ARG other);

            NE_MATH_INL_CEX NE_VECTOR4& operator*=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR4& operator*=(NE_VECTOR4_ARG other);

            NE_MATH_INL_CEX NE_VECTOR4& operator/=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR4& operator/=(NE_VECTOR4_ARG other);
#endif //NE_VECTORMATH_OP_ARITHMETIC

#ifdef NE_VECTORMATH_OP_MODULO
            NE_MATH_INL_CEX NE_VECTOR4 operator%=(NE_COMPONENT scalar);
            NE_MATH_INL_CEX NE_VECTOR4 operator%=(NE_VECTOR4_ARG other);
#endif //NE_VECTORMATH_OP_MODULO

#ifdef NE_VECTORMATH_OP_INC_DEC
            NE_MATH_INL_CEX NE_VECTOR4& operator++();
            NE_MATH_INL_CEX NE_VECTOR4 operator++(int);
            NE_MATH_INL_CEX NE_VECTOR4& operator--();
            NE_MATH_INL_CEX NE_VECTOR4 operator--(int);
#endif //NE_VECTORMATH_OP_INC_DEC
        };

#ifdef NE_VECTORMATH_OP_COMPARISON
        NE_MATH_INL_CEX Bool4 operator==(NE_COMPONENT scalar, NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX Bool4 operator==(NE_VECTOR4_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool4 operator==(NE_VECTOR4_ARG vectorA, NE_VECTOR4_ARG vectorB);

        NE_MATH_INL_CEX Bool4 operator!=(NE_COMPONENT scalar, NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX Bool4 operator!=(NE_VECTOR4_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool4 operator!=(NE_VECTOR4_ARG vectorA, NE_VECTOR4_ARG vectorB);
#endif //NE_VECTORMATH_OP_COMPARISON

#ifdef NE_VECTORMATH_OP_LOGICAL
        NE_MATH_INL_CEX Bool4 operator!(NE_VECTOR4_ARG vector);

        NE_MATH_INL_CEX Bool4 operator&&(NE_COMPONENT scalar, NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX Bool4 operator&&(NE_VECTOR4_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool4 operator&&(NE_VECTOR4_ARG vectorA, NE_VECTOR4_ARG vectorB);

        NE_MATH_INL_CEX Bool4 operator||(NE_COMPONENT scalar, NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX Bool4 operator||(NE_VECTOR4_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX Bool4 operator||(NE_VECTOR4_ARG vectorA, NE_VECTOR4_ARG vectorB);
#endif //NE_VECTORMATH_OP_LOGICAL

#ifdef NE_VECTORMATH_OP_BITWISE
        NE_MATH_INL_CEX NE_VECTOR4 operator~(NE_VECTOR4_ARG vector);

        NE_MATH_INL_CEX NE_VECTOR4 operator&(NE_COMPONENT scalar, NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR4 operator&(NE_VECTOR4_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR4 operator&(NE_VECTOR4_ARG vectorA, NE_VECTOR4_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR4 operator|(NE_COMPONENT scalar, NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR4 operator|(NE_VECTOR4_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR4 operator|(NE_VECTOR4_ARG vectorA, NE_VECTOR4_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR4 operator^(NE_COMPONENT scalar, NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR4 operator^(NE_VECTOR4_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR4 operator^(NE_VECTOR4_ARG vectorA, NE_VECTOR4_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR4 operator<<(NE_COMPONENT scalar, NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR4 operator<<(NE_VECTOR4_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR4 operator<<(NE_VECTOR4_ARG vectorA, NE_VECTOR4_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR4 operator>>(NE_COMPONENT scalar, NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR4 operator>>(NE_VECTOR4_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR4 operator>>(NE_VECTOR4_ARG vectorA, NE_VECTOR4_ARG vectorB);
#endif //NE_VECTORMATH_OP_BITWISE

#ifdef NE_VECTORMATH_OP_ARITHMETIC
        NE_MATH_INL_CEX NE_VECTOR4 operator+(NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR4 operator-(NE_VECTOR4_ARG vector);

        NE_MATH_INL_CEX NE_VECTOR4 operator+(NE_COMPONENT scalar, NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR4 operator+(NE_VECTOR4_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR4 operator+(NE_VECTOR4_ARG vectorA, NE_VECTOR4_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR4 operator-(NE_COMPONENT scalar, NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR4 operator-(NE_VECTOR4_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR4 operator-(NE_VECTOR4_ARG vectorA, NE_VECTOR4_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR4 operator*(NE_COMPONENT scalar, NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR4 operator*(NE_VECTOR4_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR4 operator*(NE_VECTOR4_ARG vectorA, NE_VECTOR4_ARG vectorB);

        NE_MATH_INL_CEX NE_VECTOR4 operator/(NE_COMPONENT scalar, NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR4 operator/(NE_VECTOR4_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR4 operator/(NE_VECTOR4_ARG vectorA, NE_VECTOR4_ARG vectorB);
#endif //NE_VECTORMATH_OP_ARITHMETIC

#ifdef NE_VECTORMATH_OP_MODULO
        NE_MATH_INL_CEX NE_VECTOR4 operator%(NE_COMPONENT scalar, NE_VECTOR4_ARG vector);
        NE_MATH_INL_CEX NE_VECTOR4 operator%(NE_VECTOR4_ARG vector, NE_COMPONENT scalar);
        NE_MATH_INL_CEX NE_VECTOR4 operator%(NE_VECTOR4_ARG vectorA, NE_VECTOR4_ARG vectorB);
#endif //NE_VECTORMATH_OP_MODULO
    } // namespace math
} // namespace null

#ifdef NE_MATH_INLINE_IMPL
#include "VectorMath.inl"
#endif //NE_MATH_INLINE_IMPL

#undef NE_COMPONENT

#undef NE_VECTOR1
#undef NE_VECTOR1_ARG

#undef NE_VECTOR2
#undef NE_VECTOR2_ARG

#undef NE_VECTOR3
#undef NE_VECTOR3_ARG

#undef NE_VECTOR4
#undef NE_VECTOR4_ARG

#undef NE_VECTORMATH_VECTOR_CLASS
#undef NE_VECTORMATH_VECTOR_TYPE

#undef NE_VECTORMATH_OP_COMPARISON
#undef NE_VECTORMATH_OP_LOGICAL
#undef NE_VECTORMATH_OP_BITWISE
#undef NE_VECTORMATH_OP_BITSHIFT
#undef NE_VECTORMATH_OP_ARITHMETIC
#undef NE_VECTORMATH_OP_MODULO
#undef NE_VECTORMATH_OP_INC_DEC
