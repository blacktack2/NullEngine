/**
 * See Vector1Test.cpp for the implementation types used for this X-Macro definition file (as well as example usage).
 */

#if !defined(NE_VECTORMATH_VECTOR_TYPE) || !defined(NE_VECTORMATH_VECTOR_CLASS) || !defined(NE_VECTORMATH_VECTOR_CLASS_ARG) || !defined(NE_VECTORMATH_VECTOR_CLASS_TEST)
#error "Must define the corresponding vector types before including this file"
#endif //!defined(NE_VECTORMATH_VECTOR_CLASS) || !defined(NE_VECTORMATH_VECTOR_TYPE)

#define NE_COMPONENT NE_VECTORMATH_VECTOR_TYPE

#define NE_VECTOR1 NE_VECTORMATH_VECTOR_CLASS(1)
#define NE_VECTOR1_ARG NE_VECTORMATH_VECTOR_CLASS_ARG(1)
#define NE_VECTOR1_TEST NE_VECTORMATH_VECTOR_CLASS_TEST(1)

#define NE_VECTOR2 NE_VECTORMATH_VECTOR_CLASS(2)
#define NE_VECTOR2_ARG NE_VECTORMATH_VECTOR_CLASS_ARG(2)
#define NE_VECTOR2_TEST NE_VECTORMATH_VECTOR_CLASS_TEST(2)

#define NE_VECTOR3 NE_VECTORMATH_VECTOR_CLASS(3)
#define NE_VECTOR3_ARG NE_VECTORMATH_VECTOR_CLASS_ARG(3)
#define NE_VECTOR3_TEST NE_VECTORMATH_VECTOR_CLASS_TEST(3)

#define NE_VECTOR4 NE_VECTORMATH_VECTOR_CLASS(4)
#define NE_VECTOR4_ARG NE_VECTORMATH_VECTOR_CLASS_ARG(4)
#define NE_VECTOR4_TEST NE_VECTORMATH_VECTOR_CLASS_TEST(4)

class NE_VECTOR1_TEST : public testing::Test
{
protected:
    NE_VECTOR1_TEST()
    {
    }
    ~NE_VECTOR1_TEST() override
    {
    }

    void SetUp() override
    {

    }

    void TearDown() override
    {

    }
};

TEST_F(NE_VECTOR1_TEST, TestConstructors)
{
    for (NE_COMPONENT i = NE_TEST_MIN; i < NE_TEST_MAX; i += NE_TEST_STEP)
    {
        float x = i;

        NE_VECTOR1 val, cpy, mov;

        val = x;
        NE_TEST_ASSERT_EQ(val.x, x);

        cpy = NE_VECTOR1(val);
        NE_TEST_ASSERT_EQ(cpy.x, x);

        mov = NE_VECTOR1(std::move(val));
        NE_TEST_ASSERT_EQ(mov.x, x);
    }
}

class NE_VECTOR2_TEST : public testing::Test
{
protected:
    NE_VECTOR2_TEST()
    {
    }
    ~NE_VECTOR2_TEST() override
    {
    }

    void SetUp() override
    {

    }

    void TearDown() override
    {

    }
};

TEST_F(NE_VECTOR2_TEST, TestConstructors)
{
    for (NE_COMPONENT i = NE_TEST_MIN; i < NE_TEST_MAX; i += NE_TEST_STEP)
    {
        float x = i;
        float y = i * 2;

        NE_VECTOR2 val, cpy, mov;

        val = NE_VECTOR2(x);
        NE_TEST_ASSERT_EQ(val.x, x);
        NE_TEST_ASSERT_EQ(val.y, x);

        val = NE_VECTOR2(x, y);
        NE_TEST_ASSERT_EQ(val.x, x);
        NE_TEST_ASSERT_EQ(val.y, y);

        cpy = NE_VECTOR2(val);
        NE_TEST_ASSERT_EQ(cpy.x, x);
        NE_TEST_ASSERT_EQ(cpy.y, y);

        mov = NE_VECTOR2(std::move(val));
        NE_TEST_ASSERT_EQ(mov.x, x);
        NE_TEST_ASSERT_EQ(mov.y, y);
    }
}

class NE_VECTOR3_TEST : public testing::Test
{
protected:
    NE_VECTOR3_TEST()
    {
    }
    ~NE_VECTOR3_TEST() override
    {
    }

    void SetUp() override
    {

    }

    void TearDown() override
    {

    }
};

TEST_F(NE_VECTOR3_TEST, TestConstructors)
{
    for (NE_COMPONENT i = NE_TEST_MIN; i < NE_TEST_MAX; i += NE_TEST_STEP)
    {
        float x = i;
        float y = i * 2;
        float z = i * 3;

        NE_VECTOR2 xy(x, y), yz(y, z);
        NE_VECTOR3 val, cpy, mov;

        val = NE_VECTOR3(x);
        NE_TEST_ASSERT_EQ(val.x, x);
        NE_TEST_ASSERT_EQ(val.y, x);
        NE_TEST_ASSERT_EQ(val.z, x);

        val = NE_VECTOR3(x, y, z);
        NE_TEST_ASSERT_EQ(val.x, x);
        NE_TEST_ASSERT_EQ(val.y, y);
        NE_TEST_ASSERT_EQ(val.z, z);

        val = NE_VECTOR3(xy, z);
        NE_TEST_ASSERT_EQ(val.x, x);
        NE_TEST_ASSERT_EQ(val.y, y);
        NE_TEST_ASSERT_EQ(val.z, z);

        val = NE_VECTOR3(x, yz);
        NE_TEST_ASSERT_EQ(val.x, x);
        NE_TEST_ASSERT_EQ(val.y, y);
        NE_TEST_ASSERT_EQ(val.z, z);

        cpy = NE_VECTOR3(val);
        NE_TEST_ASSERT_EQ(cpy.x, x);
        NE_TEST_ASSERT_EQ(cpy.y, y);
        NE_TEST_ASSERT_EQ(cpy.z, z);

        mov = NE_VECTOR3(std::move(val));
        NE_TEST_ASSERT_EQ(mov.x, x);
        NE_TEST_ASSERT_EQ(mov.y, y);
        NE_TEST_ASSERT_EQ(mov.z, z);
    }
}

class NE_VECTOR4_TEST : public testing::Test
{
protected:
    NE_VECTOR4_TEST()
    {
    }
    ~NE_VECTOR4_TEST() override
    {
    }

    void SetUp() override
    {

    }

    void TearDown() override
    {

    }
};

TEST_F(NE_VECTOR4_TEST, TestConstructors)
{
    for (NE_COMPONENT i = NE_TEST_MIN; i < NE_TEST_MAX; i += NE_TEST_STEP)
    {
        float x = i;
        float y = i * 2;
        float z = i * 3;
        float w = i * 4;

        NE_VECTOR2 xy(x, y), yz(y, z), zw(z, w);
        NE_VECTOR3 xyz(x, y, z), yzw(y, z, w);
        NE_VECTOR4 val, cpy, mov;

        val = NE_VECTOR4(x);
        NE_TEST_ASSERT_EQ(val.x, x);
        NE_TEST_ASSERT_EQ(val.y, x);
        NE_TEST_ASSERT_EQ(val.z, x);
        NE_TEST_ASSERT_EQ(val.w, x);

        val = NE_VECTOR4(x, y, z, w);
        NE_TEST_ASSERT_EQ(val.x, x);
        NE_TEST_ASSERT_EQ(val.y, y);
        NE_TEST_ASSERT_EQ(val.z, z);
        NE_TEST_ASSERT_EQ(val.w, w);

        val = NE_VECTOR4(xy, z, w);
        NE_TEST_ASSERT_EQ(val.x, x);
        NE_TEST_ASSERT_EQ(val.y, y);
        NE_TEST_ASSERT_EQ(val.z, z);
        NE_TEST_ASSERT_EQ(val.w, w);

        val = NE_VECTOR4(x, yz, w);
        NE_TEST_ASSERT_EQ(val.x, x);
        NE_TEST_ASSERT_EQ(val.y, y);
        NE_TEST_ASSERT_EQ(val.z, z);
        NE_TEST_ASSERT_EQ(val.w, w);

        val = NE_VECTOR4(x, y, zw);
        NE_TEST_ASSERT_EQ(val.x, x);
        NE_TEST_ASSERT_EQ(val.y, y);
        NE_TEST_ASSERT_EQ(val.z, z);
        NE_TEST_ASSERT_EQ(val.w, w);

        val = NE_VECTOR4(xyz, w);
        NE_TEST_ASSERT_EQ(val.x, x);
        NE_TEST_ASSERT_EQ(val.y, y);
        NE_TEST_ASSERT_EQ(val.z, z);
        NE_TEST_ASSERT_EQ(val.w, w);

        val = NE_VECTOR4(x, yzw);
        NE_TEST_ASSERT_EQ(val.x, x);
        NE_TEST_ASSERT_EQ(val.y, y);
        NE_TEST_ASSERT_EQ(val.z, z);
        NE_TEST_ASSERT_EQ(val.w, w);

        cpy = NE_VECTOR4(val);
        NE_TEST_ASSERT_EQ(cpy.x, x);
        NE_TEST_ASSERT_EQ(cpy.y, y);
        NE_TEST_ASSERT_EQ(cpy.z, z);
        NE_TEST_ASSERT_EQ(cpy.w, w);

        mov = NE_VECTOR4(std::move(val));
        NE_TEST_ASSERT_EQ(mov.x, x);
        NE_TEST_ASSERT_EQ(mov.y, y);
        NE_TEST_ASSERT_EQ(mov.z, z);
        NE_TEST_ASSERT_EQ(mov.w, w);
    }
}
